def 主函数():
    状态机模块 = 状态机()
    设备模块 = 设备管理()
    机械臂模块 = 机械臂控制()
    标定模块对象 = 标定模块()
    扫描模块 = 视觉扫描()
    路径规划模块 = 轨迹规划()
    力控模块 = 力控监测()
    清洁模块 = 清洁评估()

    print("系统启动中...")

    # 步骤1：初始化与连接设备
    if not (设备模块.连接机械臂() and 设备模块.连接相机() and 设备模块.连接力传感器()):
        print("设备连接失败，退出程序")
        return
    if not 设备模块.检查设备状态():
        设备模块.处理通信异常()
        return

    print("设备连接成功，状态正常")

    # 步骤2：机械臂回归安全位置
    if not 机械臂模块.回到安全位置():
        print("机械臂无法回归初始位置，退出")
        return

    # 步骤3：判断是否需要更换末端装置（人工装配）
    用户操作 = input("是否更换牙刷/冲牙器？(y/n): ")
    if 用户操作.lower() == 'y':
        机械臂模块.松开夹具()
        input("请人工更换装置，按回车继续...")
        机械臂模块.夹紧夹具()
        标定模块对象.末端标定()

    # 步骤4：牙模扫描（假设手眼标定已完成）
    扫描模块.扫描牙模()
    扫描模块.构建点云()
    扫描模块.计算牙模坐标关系()

    # 步骤5：用户指定刷洗区域与参数
    区域 = input("请输入需要刷洗的区域编号（如left_upper）：")
    参数 = {"频率": "中", "时长": 10, "力度": "中"}  # 示例，可从UI获取
    刷牙轨迹 = 路径规划模块.生成刷洗轨迹(区域, 参数)

    # 步骤6：执行刷洗任务 + 实时监控力反馈
    for 点 in 刷牙轨迹:
        机械臂模块.执行轨迹(点)
        力 = 力控模块.实时监测力()
        if 力控模块.检测过载() or 力 > 力阈值:
            print("检测到过载/异常力，暂停机械臂")
            break
        力控模块.动态调整()

    # 步骤7：清洁效果评估（刷牙前后对比图像由外部输入）
    刷前图 = "img/before.jpg"
    刷后图 = "img/after.jpg"
    指数 = 清洁模块.计算清洁指数(刷前图, 刷后图)
    print(f"清洁指数为：{指数:.2f}")

    print("自动刷牙流程完成。")
